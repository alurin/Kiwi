#line 2 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.tab.cpp"

#line 4 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.tab.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer KiwiFlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

/* %if-not-reentrant */
extern int yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *Kiwialloc (yy_size_t  );
void *Kiwirealloc (void *,yy_size_t  );
void Kiwifree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 109
#define YY_END_OF_BUFFER 110
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[703] =
    {   0,
        5,    5,    0,    0,    9,    9,    0,    0,  106,  106,
        0,    0,  110,    5,    4,    5,    5,    5,   93,   10,
       11,   93,   93,   86,   93,   93,   93,   93,   85,   93,
       93,   93,   93,   93,   92,   93,   93,   93,   93,   93,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   93,    9,    6,
        9,    9,   97,   94,   97,   97,  106,  104,  102,  103,
      105,  109,  108,  109,  107,    5,    4,    5,    2,   10,
       11,   35,    0,   87,   84,   31,   46,   43,   28,   40,
       29,   41,    0,    0,   42,   92,   49,   90,   38,   36,

       34,   48,   37,   39,    0,   89,   91,   91,   91,   60,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   63,   57,   61,   91,   91,   91,
       91,   32,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   47,   33,    9,    6,    7,   94,   95,  106,
      104,  102,  103,   99,   98,  101,  100,    5,    1,    5,
        3,    0,   12,    0,   87,   62,    0,   13,   90,   44,
       45,   88,   89,   91,   30,   91,   91,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   91,   91,   66,
       91,   54,   91,   91,   75,   91,   59,   91,   91,   91,

       81,   58,   91,   91,   91,   91,   91,   71,   79,   91,
       91,    8,   96,  106,  104,  102,  103,   88,   91,   91,
       50,   53,   91,   91,   55,   91,   91,   51,   91,   64,
       18,   91,   91,   91,   91,   91,   91,   91,   76,   91,
       91,   91,   82,   83,   91,   91,   91,   91,   77,   52,
       91,  106,  104,  102,  103,   91,   91,   69,   72,   15,
       91,   91,   91,   78,   27,   91,   91,   91,   20,   91,
       91,   91,   91,   91,   91,   91,   74,   68,  106,  104,
      102,  103,   91,   17,   91,   91,   65,   91,   91,   91,
       91,   91,   91,   91,   24,   80,   25,   56,  106,  104,

      102,  103,   91,   91,   91,   73,   67,   91,   91,   91,
       22,   91,  106,  104,  102,  103,   26,   70,   19,   21,
       91,   91,   91,  106,  104,  102,  103,   16,   14,   23,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,

      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,

      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,

      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  106,  104,
      102,  103,  106,  104,  102,  103,  106,  104,  102,  103,
      106,  104,  102,  103,  106,  104,  102,  103,  104,  102,

      103,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    4,
        1,    1,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,    1,
        1,   14,   15,    1,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,    1,   21,
       22,   23,    1,   24,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25,   25,
        1,   26,    1,    1,   25,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   25,   36,   37,   38,   39,
       40,   41,   25,   42,   43,   44,   45,   46,   47,   48,
       49,   25,    1,   50,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[51] =
    {   0,
        1,    1,    1,    2,    1,    1,    1,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    5,
        1,    1,    1,    6,    7,    3,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    1
    } ;

static yyconst flex_int16_t yy_base[821] =
    {   0,
        0,    2,   23,    0,   70,   72,   74,   76,   80,   96,
        4,    6, 1400,    0, 1394, 1394, 1390, 1385, 1401,    9,
     1390, 1390, 1371, 1401, 1385,    0, 1368,   74, 1401, 1368,
       72,    0, 1372,   85, 1369, 1367,   68,   86,   88, 1362,
        0,   74,   72,   89, 1354,   81,   97,   95, 1349,   94,
       86,   88, 1352, 1338,  101,   65, 1347,  114,    0, 1375,
     1375, 1367, 1401, 1372, 1372, 1364,    0,    0, 1370, 1368,
     1401,  132, 1401, 1401, 1401,    0, 1401,    9, 1352,  138,
     1401, 1401,  141,    0, 1401, 1401, 1401, 1401, 1401, 1401,
     1401, 1401, 1354,  143, 1401, 1351, 1401,    0, 1347, 1401,

     1401, 1401, 1401, 1346,    0,    0,    0, 1324, 1336, 1324,
     1320, 1323, 1331, 1317, 1333, 1332, 1319,  120, 1314, 1311,
     1318, 1315, 1311, 1313,    0, 1307,    0, 1302, 1311, 1301,
     1310,    0, 1302,  115,  123,  121,  127, 1303,  107, 1302,
     1308, 1307, 1401, 1401,    0, 1401, 1321, 1401, 1320,    0,
      157, 1335, 1333, 1401, 1401, 1401, 1401,  157, 1401, 1333,
        0,  168, 1401, 1332,    0, 1401,  170, 1401,    0, 1401,
     1401,    0,    0, 1291,    0, 1303, 1293, 1295, 1304, 1301,
     1287, 1285, 1283, 1289, 1294, 1293, 1285, 1279, 1294, 1289,
     1290, 1287, 1282, 1285,    0, 1278,    0, 1268, 1269, 1275,

      127,    0, 1266, 1266, 1274, 1268, 1276,    0,    0, 1276,
     1268,    0, 1401,    0,  175, 1300, 1298,    0, 1260, 1272,
        0,    0, 1264, 1265,    0, 1255, 1262,    0, 1263, 1260,
        0, 1263, 1256, 1265, 1247, 1248, 1250, 1245,    0, 1260,
     1255, 1250,    0,    0, 1242, 1248, 1243, 1234,    0,    0,
     1249,    0,  177, 1275, 1273, 1250, 1232,    0,    0,    0,
     1236, 1247, 1241,    0, 1235, 1242, 1235, 1237,    0, 1227,
     1223, 1237, 1236, 1225, 1234, 1229,    0,    0,    0,  179,
     1257, 1255, 1230,    0, 1213, 1213,    0, 1207, 1221, 1214,
     1226, 1225, 1220, 1206,    0,    0,    0,    0,    0,  181,

     1245, 1243, 1203, 1215, 1214,    0,    0, 1205, 1214, 1213,
        0, 1210,    0,  183, 1236, 1234,    0,    0,    0,    0,
     1207, 1206, 1206,    0,  185, 1231, 1229,    0,    0,    0,
        0,  187, 1229, 1227,    0,  189, 1227, 1225,    0,  191,
     1225, 1223,    0,  193, 1223, 1221,    0,  195, 1221, 1219,
        0,  197, 1219, 1217,    0,  199, 1217, 1215,    0,  201,
     1215, 1213,    0,  203, 1213, 1211,    0,  205, 1211, 1209,
        0,  207, 1209, 1207,    0,  209, 1207, 1205,    0,  211,
     1205, 1203,    0,  213, 1203, 1201,    0,  215, 1201, 1199,
        0,  217, 1199, 1197,    0,  219, 1197, 1195,    0,  221,

     1195, 1193,    0,  223, 1193, 1191,    0,  225, 1191, 1189,
        0,  227, 1189, 1187,    0,  229, 1187, 1185,    0,  231,
     1185, 1183,    0,  233, 1183, 1181,    0,  235, 1181, 1179,
        0,  237, 1179, 1177,    0,  239, 1177, 1175,    0,  241,
     1175, 1173,    0,  243, 1173, 1171,    0,  245, 1171, 1169,
        0,  247, 1169, 1167,    0,  249, 1167, 1165,    0,  251,
     1165, 1163,    0,  253, 1163, 1161,    0,  255, 1161, 1159,
        0,  257, 1159, 1153,    0,  259, 1147, 1139,    0,  261,
     1133, 1125,    0,  263, 1119, 1111,    0,  265, 1105, 1097,
        0,  267, 1091, 1083,    0,  269, 1077, 1069,    0,  271,

     1063, 1055,    0,  273, 1049, 1041,    0,  275, 1035, 1027,
        0,  277, 1021, 1013,    0,  279, 1007,  999,    0,  281,
      993,  985,    0,  283,  979,  971,    0,  285,  965,  957,
        0,  287,  951,  943,    0,  289,  937,  929,    0,  291,
      923,  915,    0,  293,  909,  901,    0,  295,  895,  887,
        0,  297,  881,  873,    0,  299,  867,  859,    0,  301,
      853,  845,    0,  303,  839,  831,    0,  305,  825,  817,
        0,  307,  811,  803,    0,  309,  797,  789,    0,  311,
      783,  775,    0,  313,  769,  761,    0,  315,  755,  747,
        0,  317,  741,  733,    0,  319,  727,  719,    0,  321,

      713,  705,    0,  323,  699,  691,    0,  325,  685,  677,
        0,  327,  671,  663,    0,  329,  657,  649,    0,  331,
      643,  635,    0,  333,  629,  621,    0,  335,  615,  607,
        0,  337,  601,  593,    0,  339,  587,  579,    0,  341,
      573,  565,    0,  343,  559,  551,    0,  345,  545,  537,
        0,  347,  531,  523,    0,  349,  517,  509,    0,  351,
      503,  495,    0,  353,  489,  481,    0,  355,  478,  476,
        0,  357,  471,  466,    0,  359,  466,  462,    0,  361,
      462,  451,    0,  363,  451,  430,    0,  365,  423,  419,
        0,  367,  419,  413, 1401,  369,  407,  163,  371,  159,

      110, 1401,  374,  381,  388,  395,  402,  409,   13,  412,
      414,  418,  425,  432,  439,  446,  450,  457,  461,   11,
      465,  472,  476,  483,  490,  497,  504,  511,  518,  525,
      532,  539,  546,  553,  560,  567,  574,  581,  588,  595,
      602,  609,  616,  623,  630,  637,  644,  651,  658,  665,
      672,  679,  686,  693,  700,  707,  714,  721,  728,  735,
      742,  749,  756,  763,  770,  777,  784,  791,  798,  805,
      812,  819,  826,  833,  840,  847,  854,  861,  868,  875,
      882,  889,  896,  903,  910,  917,  924,  931,  938,  945,
      952,  959,  966,  973,  980,  987,  994, 1001, 1008, 1015,

     1022, 1029, 1036, 1043, 1050, 1057, 1064, 1071, 1078, 1085,
     1092, 1099, 1106, 1113, 1120, 1127, 1134, 1141, 1148, 1155
    } ;

static yyconst flex_int16_t yy_def[821] =
    {   0,
      703,  703,  702,    3,  704,  704,  705,  705,  706,  706,
      707,  707,  702,  708,  702,  708,  708,  708,  702,  702,
      702,  702,  702,  702,  702,  709,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  710,  702,  702,  702,  711,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  702,  713,  702,
      713,  713,  702,  702,  702,  702,  714,  714,  714,  714,
      702,  702,  702,  702,  702,  708,  702,  715,  708,  702,
      702,  702,  716,  717,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  718,  702,  702,  702,  719,  702,  702,

      702,  702,  702,  702,  720,  721,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  702,  702,  713,  702,  713,  702,  702,  722,
      722,  722,  722,  702,  702,  702,  702,  715,  702,  708,
      708,  716,  702,  702,  717,  702,  718,  702,  719,  702,
      702,  723,  721,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  713,  702,  724,  724,  724,  724,  723,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  725,  725,  725,  725,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  726,  726,
      726,  726,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  727,  727,

      727,  727,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  728,  728,  728,  728,  712,  712,  712,  712,
      712,  712,  712,  729,  729,  729,  729,  712,  712,  712,
      730,  730,  730,  730,  731,  731,  731,  731,  732,  732,
      732,  732,  733,  733,  733,  733,  734,  734,  734,  734,
      735,  735,  735,  735,  736,  736,  736,  736,  737,  737,
      737,  737,  738,  738,  738,  738,  739,  739,  739,  739,
      740,  740,  740,  740,  741,  741,  741,  741,  742,  742,
      742,  742,  743,  743,  743,  743,  744,  744,  744,  744,
      745,  745,  745,  745,  746,  746,  746,  746,  747,  747,

      747,  747,  748,  748,  748,  748,  749,  749,  749,  749,
      750,  750,  750,  750,  751,  751,  751,  751,  752,  752,
      752,  752,  753,  753,  753,  753,  754,  754,  754,  754,
      755,  755,  755,  755,  756,  756,  756,  756,  757,  757,
      757,  757,  758,  758,  758,  758,  759,  759,  759,  759,
      760,  760,  760,  760,  761,  761,  761,  761,  762,  762,
      762,  762,  763,  763,  763,  763,  764,  764,  764,  764,
      765,  765,  765,  765,  766,  766,  766,  766,  767,  767,
      767,  767,  768,  768,  768,  768,  769,  769,  769,  769,
      770,  770,  770,  770,  771,  771,  771,  771,  772,  772,

      772,  772,  773,  773,  773,  773,  774,  774,  774,  774,
      775,  775,  775,  775,  776,  776,  776,  776,  777,  777,
      777,  777,  778,  778,  778,  778,  779,  779,  779,  779,
      780,  780,  780,  780,  781,  781,  781,  781,  782,  782,
      782,  782,  783,  783,  783,  783,  784,  784,  784,  784,
      785,  785,  785,  785,  786,  786,  786,  786,  787,  787,
      787,  787,  788,  788,  788,  788,  789,  789,  789,  789,
      790,  790,  790,  790,  791,  791,  791,  791,  792,  792,
      792,  792,  793,  793,  793,  793,  794,  794,  794,  794,
      795,  795,  795,  795,  796,  796,  796,  796,  797,  797,

      797,  797,  798,  798,  798,  798,  799,  799,  799,  799,
      800,  800,  800,  800,  801,  801,  801,  801,  802,  802,
      802,  802,  803,  803,  803,  803,  804,  804,  804,  804,
      805,  805,  805,  805,  806,  806,  806,  806,  807,  807,
      807,  807,  808,  808,  808,  808,  809,  809,  809,  809,
      810,  810,  810,  810,  811,  811,  811,  811,  812,  812,
      812,  812,  813,  813,  813,  813,  814,  814,  814,  814,
      815,  815,  815,  815,  816,  816,  816,  816,  817,  817,
      817,  817,  818,  818,  818,  818,  819,  819,  819,  819,
      820,  820,  820,  820,  702,  702,  702,  702,  702,  702,

      702,    0,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,

      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702
    } ;

static yyconst flex_int16_t yy_nxt[1452] =
    {   0,
      702,  151,  151,   15,   16,   15,   16,   74,   17,   74,
       17,   80,  159,  160,   80,   91,   75,  172,   75,   84,
       18,   92,   18,   19,   19,   20,   21,   22,   20,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   19,   42,
       43,   44,   45,   46,   47,   41,   41,   48,   41,   41,
       49,   50,   51,   52,   53,   54,   55,   41,   56,   57,
       41,   41,   58,   60,   61,   60,   61,   64,   65,   64,
       65,   68,   68,   69,   70,   86,   89,   71,   99,  100,
       62,  140,   62,   90,   66,   87,   66,   68,   68,   69,

       70,  108,   94,   71,  141,   72,   95,  101,  102,  103,
      104,  112,  109,  113,  701,  114,  110,  119,  111,  120,
      129,   72,  115,  121,  130,  116,  125,  132,  117,  134,
      133,  122,  135,  126,  138,  143,  123,  127,  131,  154,
       80,  124,  139,   80,  163,  164,  168,  168,  184,  198,
      200,  207,  202,  204,  199,  208,  185,  155,  215,  215,
      159,  160,  700,  144,  203,  243,  201,  701,  205,  244,
      156,  163,  164,  168,  168,  157,  253,  253,  280,  280,
      300,  300,  314,  314,  325,  325,  332,  332,  336,  336,
      340,  340,  344,  344,  348,  348,  352,  352,  356,  356,

      360,  360,  364,  364,  368,  368,  372,  372,  376,  376,
      380,  380,  384,  384,  388,  388,  392,  392,  396,  396,
      400,  400,  404,  404,  408,  408,  412,  412,  416,  416,
      420,  420,  424,  424,  428,  428,  432,  432,  436,  436,
      440,  440,  444,  444,  448,  448,  452,  452,  456,  456,
      460,  460,  464,  464,  468,  468,  472,  472,  476,  476,
      480,  480,  484,  484,  488,  488,  492,  492,  496,  496,
      500,  500,  504,  504,  508,  508,  512,  512,  516,  516,
      520,  520,  524,  524,  528,  528,  532,  532,  536,  536,
      540,  540,  544,  544,  548,  548,  552,  552,  556,  556,

      560,  560,  564,  564,  568,  568,  572,  572,  576,  576,
      580,  580,  584,  584,  588,  588,  592,  592,  596,  596,
      600,  600,  604,  604,  608,  608,  612,  612,  616,  616,
      620,  620,  624,  624,  628,  628,  632,  632,  636,  636,
      640,  640,  644,  644,  648,  648,  652,  652,  656,  656,
      660,  660,  664,  664,  668,  668,  672,  672,  676,  676,
      680,  680,  684,  684,  688,  688,  692,  692,  696,  696,
      699,  699,  699,  699,   14,   14,   14,   14,   14,   14,
       14,   59,   59,   59,   59,   59,   59,   59,   63,   63,
       63,   63,   63,   63,   63,   67,   67,   67,   67,   67,

       67,   67,   73,   73,   73,   73,   73,   73,   73,   76,
      700,   76,   76,   76,   76,   76,   98,  698,   98,  106,
      106,  107,  697,  694,  107,  145,  693,  145,  145,  145,
      145,  145,  150,  150,  690,  150,  150,  150,  150,  158,
      158,  158,  158,  158,  158,  158,  162,  162,  162,  162,
      162,  162,  162,  165,  689,  686,  165,  167,  167,  167,
      167,  167,  167,  167,  169,  685,  682,  169,  173,  681,
      678,  173,  214,  214,  677,  214,  214,  214,  214,  218,
      674,  673,  218,  252,  252,  670,  252,  252,  252,  252,
      279,  279,  669,  279,  279,  279,  279,  299,  299,  666,

      299,  299,  299,  299,  313,  313,  665,  313,  313,  313,
      313,  324,  324,  662,  324,  324,  324,  324,  331,  331,
      661,  331,  331,  331,  331,  335,  335,  658,  335,  335,
      335,  335,  339,  339,  657,  339,  339,  339,  339,  343,
      343,  654,  343,  343,  343,  343,  347,  347,  653,  347,
      347,  347,  347,  351,  351,  650,  351,  351,  351,  351,
      355,  355,  649,  355,  355,  355,  355,  359,  359,  646,
      359,  359,  359,  359,  363,  363,  645,  363,  363,  363,
      363,  367,  367,  642,  367,  367,  367,  367,  371,  371,
      641,  371,  371,  371,  371,  375,  375,  638,  375,  375,

      375,  375,  379,  379,  637,  379,  379,  379,  379,  383,
      383,  634,  383,  383,  383,  383,  387,  387,  633,  387,
      387,  387,  387,  391,  391,  630,  391,  391,  391,  391,
      395,  395,  629,  395,  395,  395,  395,  399,  399,  626,
      399,  399,  399,  399,  403,  403,  625,  403,  403,  403,
      403,  407,  407,  622,  407,  407,  407,  407,  411,  411,
      621,  411,  411,  411,  411,  415,  415,  618,  415,  415,
      415,  415,  419,  419,  617,  419,  419,  419,  419,  423,
      423,  614,  423,  423,  423,  423,  427,  427,  613,  427,
      427,  427,  427,  431,  431,  610,  431,  431,  431,  431,

      435,  435,  609,  435,  435,  435,  435,  439,  439,  606,
      439,  439,  439,  439,  443,  443,  605,  443,  443,  443,
      443,  447,  447,  602,  447,  447,  447,  447,  451,  451,
      601,  451,  451,  451,  451,  455,  455,  598,  455,  455,
      455,  455,  459,  459,  597,  459,  459,  459,  459,  463,
      463,  594,  463,  463,  463,  463,  467,  467,  593,  467,
      467,  467,  467,  471,  471,  590,  471,  471,  471,  471,
      475,  475,  589,  475,  475,  475,  475,  479,  479,  586,
      479,  479,  479,  479,  483,  483,  585,  483,  483,  483,
      483,  487,  487,  582,  487,  487,  487,  487,  491,  491,

      581,  491,  491,  491,  491,  495,  495,  578,  495,  495,
      495,  495,  499,  499,  577,  499,  499,  499,  499,  503,
      503,  574,  503,  503,  503,  503,  507,  507,  573,  507,
      507,  507,  507,  511,  511,  570,  511,  511,  511,  511,
      515,  515,  569,  515,  515,  515,  515,  519,  519,  566,
      519,  519,  519,  519,  523,  523,  565,  523,  523,  523,
      523,  527,  527,  562,  527,  527,  527,  527,  531,  531,
      561,  531,  531,  531,  531,  535,  535,  558,  535,  535,
      535,  535,  539,  539,  557,  539,  539,  539,  539,  543,
      543,  554,  543,  543,  543,  543,  547,  547,  553,  547,

      547,  547,  547,  551,  551,  550,  551,  551,  551,  551,
      555,  555,  549,  555,  555,  555,  555,  559,  559,  546,
      559,  559,  559,  559,  563,  563,  545,  563,  563,  563,
      563,  567,  567,  542,  567,  567,  567,  567,  571,  571,
      541,  571,  571,  571,  571,  575,  575,  538,  575,  575,
      575,  575,  579,  579,  537,  579,  579,  579,  579,  583,
      583,  534,  583,  583,  583,  583,  587,  587,  533,  587,
      587,  587,  587,  591,  591,  530,  591,  591,  591,  591,
      595,  595,  529,  595,  595,  595,  595,  599,  599,  526,
      599,  599,  599,  599,  603,  603,  525,  603,  603,  603,

      603,  607,  607,  522,  607,  607,  607,  607,  611,  611,
      521,  611,  611,  611,  611,  615,  615,  518,  615,  615,
      615,  615,  619,  619,  517,  619,  619,  619,  619,  623,
      623,  514,  623,  623,  623,  623,  627,  627,  513,  627,
      627,  627,  627,  631,  631,  510,  631,  631,  631,  631,
      635,  635,  509,  635,  635,  635,  635,  639,  639,  506,
      639,  639,  639,  639,  643,  643,  505,  643,  643,  643,
      643,  647,  647,  502,  647,  647,  647,  647,  651,  651,
      501,  651,  651,  651,  651,  655,  655,  498,  655,  655,
      655,  655,  659,  659,  497,  659,  659,  659,  659,  663,

      663,  494,  663,  663,  663,  663,  667,  667,  493,  667,
      667,  667,  667,  671,  671,  490,  671,  671,  671,  671,
      675,  675,  489,  675,  675,  675,  675,  679,  679,  486,
      679,  679,  679,  679,  683,  683,  485,  683,  683,  683,
      683,  687,  687,  482,  687,  687,  687,  687,  691,  691,
      481,  691,  691,  691,  691,  695,  695,  478,  695,  695,
      695,  695,  477,  474,  473,  470,  469,  466,  465,  462,
      461,  458,  457,  454,  453,  450,  449,  446,  445,  442,
      441,  438,  437,  434,  433,  430,  429,  426,  425,  422,
      421,  418,  417,  414,  413,  410,  409,  406,  405,  402,

      401,  398,  397,  394,  393,  390,  389,  386,  385,  382,
      381,  378,  377,  374,  373,  370,  369,  366,  365,  362,
      361,  358,  357,  354,  353,  350,  349,  346,  345,  342,
      341,  338,  337,  334,  333,  330,  329,  328,  327,  326,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  298,  297,  296,  295,  294,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  284,  283,  282,  281,  278,
      277,  276,  275,  274,  273,  272,  271,  270,  269,  268,
      267,  266,  265,  264,  263,  262,  261,  260,  259,  258,

      257,  256,  255,  254,  251,  250,  249,  248,  247,  246,
      245,  242,  241,  240,  239,  238,  237,  236,  235,  234,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      223,  222,  221,  220,  219,  163,  159,  217,  216,  213,
      212,  211,  210,  209,  206,  197,  196,  195,  194,  193,
      192,  191,  190,  189,  188,  187,  186,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  171,  170,   96,
      166,  161,  153,  152,  149,  148,  148,  147,  146,  146,
      142,  137,  136,  128,  118,  105,   97,   96,   93,   88,
       85,   83,   82,   81,   81,   79,   78,   77,   77,  702,

       13,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702
    } ;

static yyconst flex_int16_t yy_chk[1452] =
    {   0,
        0,   68,   68,    1,    1,    2,    2,   11,    1,   12,
        2,   20,   78,   78,   20,   32,   11,  720,   12,  709,
        1,   32,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    5,    5,    6,    6,    7,    7,    8,
        8,    9,    9,    9,    9,   28,   31,    9,   37,   37,
        5,   56,    6,   31,    7,   28,    8,   10,   10,   10,

       10,   42,   34,   10,   56,    9,   34,   38,   38,   39,
       39,   43,   42,   43,  701,   44,   42,   46,   42,   46,
       50,   10,   44,   47,   50,   44,   48,   51,   44,   52,
       51,   47,   52,   48,   55,   58,   47,   48,   50,   72,
       80,   47,   55,   80,   83,   83,   94,   94,  118,  134,
      135,  139,  136,  137,  134,  139,  118,   72,  151,  151,
      158,  158,  700,   58,  136,  201,  135,  698,  137,  201,
       72,  162,  162,  167,  167,   72,  215,  215,  253,  253,
      280,  280,  300,  300,  314,  314,  325,  325,  332,  332,
      336,  336,  340,  340,  344,  344,  348,  348,  352,  352,

      356,  356,  360,  360,  364,  364,  368,  368,  372,  372,
      376,  376,  380,  380,  384,  384,  388,  388,  392,  392,
      396,  396,  400,  400,  404,  404,  408,  408,  412,  412,
      416,  416,  420,  420,  424,  424,  428,  428,  432,  432,
      436,  436,  440,  440,  444,  444,  448,  448,  452,  452,
      456,  456,  460,  460,  464,  464,  468,  468,  472,  472,
      476,  476,  480,  480,  484,  484,  488,  488,  492,  492,
      496,  496,  500,  500,  504,  504,  508,  508,  512,  512,
      516,  516,  520,  520,  524,  524,  528,  528,  532,  532,
      536,  536,  540,  540,  544,  544,  548,  548,  552,  552,

      556,  556,  560,  560,  564,  564,  568,  568,  572,  572,
      576,  576,  580,  580,  584,  584,  588,  588,  592,  592,
      596,  596,  600,  600,  604,  604,  608,  608,  612,  612,
      616,  616,  620,  620,  624,  624,  628,  628,  632,  632,
      636,  636,  640,  640,  644,  644,  648,  648,  652,  652,
      656,  656,  660,  660,  664,  664,  668,  668,  672,  672,
      676,  676,  680,  680,  684,  684,  688,  688,  692,  692,
      696,  696,  699,  699,  703,  703,  703,  703,  703,  703,
      703,  704,  704,  704,  704,  704,  704,  704,  705,  705,
      705,  705,  705,  705,  705,  706,  706,  706,  706,  706,

      706,  706,  707,  707,  707,  707,  707,  707,  707,  708,
      697,  708,  708,  708,  708,  708,  710,  694,  710,  711,
      711,  712,  693,  690,  712,  713,  689,  713,  713,  713,
      713,  713,  714,  714,  686,  714,  714,  714,  714,  715,
      715,  715,  715,  715,  715,  715,  716,  716,  716,  716,
      716,  716,  716,  717,  685,  682,  717,  718,  718,  718,
      718,  718,  718,  718,  719,  681,  678,  719,  721,  677,
      674,  721,  722,  722,  673,  722,  722,  722,  722,  723,
      670,  669,  723,  724,  724,  666,  724,  724,  724,  724,
      725,  725,  665,  725,  725,  725,  725,  726,  726,  662,

      726,  726,  726,  726,  727,  727,  661,  727,  727,  727,
      727,  728,  728,  658,  728,  728,  728,  728,  729,  729,
      657,  729,  729,  729,  729,  730,  730,  654,  730,  730,
      730,  730,  731,  731,  653,  731,  731,  731,  731,  732,
      732,  650,  732,  732,  732,  732,  733,  733,  649,  733,
      733,  733,  733,  734,  734,  646,  734,  734,  734,  734,
      735,  735,  645,  735,  735,  735,  735,  736,  736,  642,
      736,  736,  736,  736,  737,  737,  641,  737,  737,  737,
      737,  738,  738,  638,  738,  738,  738,  738,  739,  739,
      637,  739,  739,  739,  739,  740,  740,  634,  740,  740,

      740,  740,  741,  741,  633,  741,  741,  741,  741,  742,
      742,  630,  742,  742,  742,  742,  743,  743,  629,  743,
      743,  743,  743,  744,  744,  626,  744,  744,  744,  744,
      745,  745,  625,  745,  745,  745,  745,  746,  746,  622,
      746,  746,  746,  746,  747,  747,  621,  747,  747,  747,
      747,  748,  748,  618,  748,  748,  748,  748,  749,  749,
      617,  749,  749,  749,  749,  750,  750,  614,  750,  750,
      750,  750,  751,  751,  613,  751,  751,  751,  751,  752,
      752,  610,  752,  752,  752,  752,  753,  753,  609,  753,
      753,  753,  753,  754,  754,  606,  754,  754,  754,  754,

      755,  755,  605,  755,  755,  755,  755,  756,  756,  602,
      756,  756,  756,  756,  757,  757,  601,  757,  757,  757,
      757,  758,  758,  598,  758,  758,  758,  758,  759,  759,
      597,  759,  759,  759,  759,  760,  760,  594,  760,  760,
      760,  760,  761,  761,  593,  761,  761,  761,  761,  762,
      762,  590,  762,  762,  762,  762,  763,  763,  589,  763,
      763,  763,  763,  764,  764,  586,  764,  764,  764,  764,
      765,  765,  585,  765,  765,  765,  765,  766,  766,  582,
      766,  766,  766,  766,  767,  767,  581,  767,  767,  767,
      767,  768,  768,  578,  768,  768,  768,  768,  769,  769,

      577,  769,  769,  769,  769,  770,  770,  574,  770,  770,
      770,  770,  771,  771,  573,  771,  771,  771,  771,  772,
      772,  570,  772,  772,  772,  772,  773,  773,  569,  773,
      773,  773,  773,  774,  774,  566,  774,  774,  774,  774,
      775,  775,  565,  775,  775,  775,  775,  776,  776,  562,
      776,  776,  776,  776,  777,  777,  561,  777,  777,  777,
      777,  778,  778,  558,  778,  778,  778,  778,  779,  779,
      557,  779,  779,  779,  779,  780,  780,  554,  780,  780,
      780,  780,  781,  781,  553,  781,  781,  781,  781,  782,
      782,  550,  782,  782,  782,  782,  783,  783,  549,  783,

      783,  783,  783,  784,  784,  546,  784,  784,  784,  784,
      785,  785,  545,  785,  785,  785,  785,  786,  786,  542,
      786,  786,  786,  786,  787,  787,  541,  787,  787,  787,
      787,  788,  788,  538,  788,  788,  788,  788,  789,  789,
      537,  789,  789,  789,  789,  790,  790,  534,  790,  790,
      790,  790,  791,  791,  533,  791,  791,  791,  791,  792,
      792,  530,  792,  792,  792,  792,  793,  793,  529,  793,
      793,  793,  793,  794,  794,  526,  794,  794,  794,  794,
      795,  795,  525,  795,  795,  795,  795,  796,  796,  522,
      796,  796,  796,  796,  797,  797,  521,  797,  797,  797,

      797,  798,  798,  518,  798,  798,  798,  798,  799,  799,
      517,  799,  799,  799,  799,  800,  800,  514,  800,  800,
      800,  800,  801,  801,  513,  801,  801,  801,  801,  802,
      802,  510,  802,  802,  802,  802,  803,  803,  509,  803,
      803,  803,  803,  804,  804,  506,  804,  804,  804,  804,
      805,  805,  505,  805,  805,  805,  805,  806,  806,  502,
      806,  806,  806,  806,  807,  807,  501,  807,  807,  807,
      807,  808,  808,  498,  808,  808,  808,  808,  809,  809,
      497,  809,  809,  809,  809,  810,  810,  494,  810,  810,
      810,  810,  811,  811,  493,  811,  811,  811,  811,  812,

      812,  490,  812,  812,  812,  812,  813,  813,  489,  813,
      813,  813,  813,  814,  814,  486,  814,  814,  814,  814,
      815,  815,  485,  815,  815,  815,  815,  816,  816,  482,
      816,  816,  816,  816,  817,  817,  481,  817,  817,  817,
      817,  818,  818,  478,  818,  818,  818,  818,  819,  819,
      477,  819,  819,  819,  819,  820,  820,  474,  820,  820,
      820,  820,  473,  470,  469,  466,  465,  462,  461,  458,
      457,  454,  453,  450,  449,  446,  445,  442,  441,  438,
      437,  434,  433,  430,  429,  426,  425,  422,  421,  418,
      417,  414,  413,  410,  409,  406,  405,  402,  401,  398,

      397,  394,  393,  390,  389,  386,  385,  382,  381,  378,
      377,  374,  373,  370,  369,  366,  365,  362,  361,  358,
      357,  354,  353,  350,  349,  346,  345,  342,  341,  338,
      337,  334,  333,  327,  326,  323,  322,  321,  316,  315,
      312,  310,  309,  308,  305,  304,  303,  302,  301,  294,
      293,  292,  291,  290,  289,  288,  286,  285,  283,  282,
      281,  276,  275,  274,  273,  272,  271,  270,  268,  267,
      266,  265,  263,  262,  261,  257,  256,  255,  254,  251,
      248,  247,  246,  245,  242,  241,  240,  238,  237,  236,
      235,  234,  233,  232,  230,  229,  227,  226,  224,  223,

      220,  219,  217,  216,  211,  210,  207,  206,  205,  204,
      203,  200,  199,  198,  196,  194,  193,  192,  191,  190,
      189,  188,  187,  186,  185,  184,  183,  182,  181,  180,
      179,  178,  177,  176,  174,  164,  160,  153,  152,  149,
      147,  142,  141,  140,  138,  133,  131,  130,  129,  128,
      126,  124,  123,  122,  121,  120,  119,  117,  116,  115,
      114,  113,  112,  111,  110,  109,  108,  104,   99,   96,
       93,   79,   70,   69,   66,   65,   64,   62,   61,   60,
       57,   54,   53,   49,   45,   40,   36,   35,   33,   30,
       27,   25,   23,   22,   21,   18,   17,   16,   15,   13,

      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
      702
    } ;

static yyconst flex_int16_t yy_rule_linenum[109] =
    {   0,
       52,   58,   62,   67,   74,   85,   91,   93,   98,  108,
      109,  110,  111,  113,  114,  115,  116,  117,  118,  119,
      120,  122,  123,  124,  125,  126,  127,  129,  130,  131,
      132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
      142,  143,  144,  145,  146,  147,  148,  149,  151,  152,
      153,  154,  155,  156,  157,  158,  160,  161,  162,  164,
      165,  167,  169,  170,  171,  172,  173,  174,  175,  176,
      177,  178,  179,  180,  181,  183,  184,  185,  187,  188,
      190,  191,  192,  194,  195,  196,  198,  203,  208,  213,
      218,  223,  228,  234,  241,  245,  250,  257,  258,  259,

      260,  261,  262,  263,  265,  273,  277,  291
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
#line 10 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
    # include "Driver.hpp"
    # include "Parser.tab.hpp"
    # include "Lexer.hpp"
    # include <string>
    # include <sstream>

    using namespace kiwi;
    using namespace kiwi::script;

    typedef Parser::token      token;
    typedef Parser::token_type token_type;

    # define yyterminate() return token::T_EOF
    # define YY_USER_ACTION yylloc->columns (yyleng);

    # ifndef EOF
    #  define EOF (-1)
    # endif





#line 1109 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.tab.cpp"

#define INITIAL 0
#define CodeState 1
#define ScriptState 2
#define PrintState 3
#define UnicodeStringState 4
#define UnicodeCharState 5

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 44 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"



    std::stringstream strBuffer; /// Utf-8 string buffer
    yylloc->step ();


#line 1284 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.tab.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 703 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 702 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 109 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 109 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 110 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 52 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{ /* skip unix decloration and comments */
        yylloc->lines(1);
        yylloc->step();
        BEGIN(CodeState);
    }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 58 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{ /* Begin template code */
        BEGIN(CodeState);
    }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 62 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{ /* Begin print template code */
        BEGIN(CodeState);
        return token::T_SCRIPT_PRINT;
    }
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 67 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{ /* skip whitespaces */
        yylloc->lines(yyleng);
        yylloc->step();
        BEGIN(ScriptState);
        return token::T_SCRIPT_NEWLINE;
    }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{ /* Begin template */
        BEGIN(ScriptState);
        strBuffer << yytext;
        yylval->sval = new UnicodeString(strBuffer.str().c_str());
        yylloc->columns (yyleng);
        strBuffer.str(std::string());
        return token::T_SCRIPT_STRING;
    }
	YY_BREAK


case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 85 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{ /* skip whitespaces */
        yylloc->lines(yyleng);
        yylloc->step();
        return token::T_SCRIPT_NEWLINE;
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 91 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
BEGIN(CodeState);
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 93 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{         /* Begin print template code */
                    BEGIN(PrintState);
                    return token::T_PRINT;
    }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 98 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{            /* Begin template */
                    strBuffer << yytext;
                    yylval->sval = new UnicodeString(strBuffer.str().c_str());
                    yylloc->columns (yyleng);
                    strBuffer.str(std::string());
                    return token::T_SCRIPT_STRING;
    }
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 108 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
yylloc->step();                        /* skip whitespaces                     */
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 109 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
yylloc->lines(yyleng); yylloc->step(); /* skip whitespaces                     */
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 110 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
yylloc->lines(1); yylloc->step();      /* skip unix decloration and comments   */
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 111 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
yylloc->lines(1); yylloc->step();      /* skip line comment                    */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 113 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_NAMESPACE;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 114 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_CLASS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 115 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_INTERFACE;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 116 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ASPECT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 117 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ENUM;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 118 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_DELEGATE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 119 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_MIXIN;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 120 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_FUNCTION;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 122 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_PRIVATE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 123 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_PROTECTED;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 124 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_PUBLIC;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 125 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_STATIC;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 126 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ABSTRACT;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 127 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_FINAL;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 129 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_INC;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 130 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_DEC;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 131 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 132 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AND;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 133 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_OR;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 134 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_OR;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 135 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_EQ;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 136 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_NE;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 137 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_LE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 138 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_GE;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 139 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_SHL;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 140 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_SHR;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 141 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AADD;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 142 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ASUB;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 143 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ADIV;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 144 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AMUL;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 145 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ASHL;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 146 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ASHR;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 147 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AAND;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 148 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AOR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 149 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_INSERT;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 151 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_NS_SEPARATOR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 152 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AUTO;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 153 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_DECL;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 154 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_VOID;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 155 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_BOOL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 156 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_INT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 157 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_CHAR;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_STRING;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 160 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_IN;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 161 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_REF;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 162 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_OUT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 164 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_AS;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 165 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_IS;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 167 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_DOTS;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 169 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_IF;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 170 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ELSE;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 171 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_ELSEIF;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 172 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_FOR;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 173 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_FOREACH;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 174 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_WHILE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 175 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_BREAK;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 176 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_CONTINUE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 177 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_TRY;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 178 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_CATCH;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 179 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_FINALLY;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 180 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_THROW;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 181 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_NEW;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 183 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_NULL;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 184 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_TRUE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 185 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_FALSE;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 187 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_VAR;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 188 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_RETURN;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 190 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_PRINT;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 191 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_PRINT_NL;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 192 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
return token::T_PRINT_NL;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 194 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
BEGIN(PrintState);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 195 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
BEGIN(UnicodeCharState);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 196 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
BEGIN(UnicodeStringState);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 198 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{    /* Identifier */
                    yylval->sval = new UnicodeString(yytext + 1);
                    return token::T_VARIABLE;
    }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 203 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{    /* Identifier */
                    yylval->sval = new UnicodeString(yytext + 1);
                    return token::T_STATIC_FIELD;
    }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 208 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{    /* Identifier */
                    yylval->sval = new UnicodeString(yytext + 1);
                    return token::T_INSTANCE_FIELD;
    }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 213 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{
                    yylval->sval = new UnicodeString(yytext + 1);
                    return token::T_SYMBOL;
    }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 218 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{
                    yylval->sval = new UnicodeString(yytext);
                    return token::T_IDENTIFIER;
    }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 223 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{
                    yylval->ival  = atoll(yytext);
                    return token::T_CONST_INTEGER;
    }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 228 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{
                    return static_cast<token_type>(*yytext);
    }
	YY_BREAK


case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 234 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{        /* skip whitespaces */
                    yylloc->lines(yyleng);
                    yylloc->step();
                    yylval->cval = *yytext;
                    return token::T_SCRIPT_STRING;
    }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 241 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{          /* Begin template code */
                    BEGIN(CodeState);
    }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 245 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{         /* Begin print template code */
                    BEGIN(CodeState);
                    return token::T_PRINT;
    }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 250 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{             /* Begin template */
                    yylval->cval = *yytext;
                    return token::T_SCRIPT_STRING;
    }
	YY_BREAK


case 98:
YY_RULE_SETUP
#line 257 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << '\\';
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 258 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << '"';
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 259 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << '\t';
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 260 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << '\n';
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 261 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << yytext; yylloc->lines (yyleng);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 262 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << yytext; yylloc->lines (yyleng);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 263 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << yytext; yylloc->columns (yyleng);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 265 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{           /* END OF STRING */
                    yylval->sval = new UnicodeString(strBuffer.str().c_str());
                    yylloc->columns (yyleng);
                    strBuffer.str(std::string());
                    BEGIN(CodeState);
                    return token::T_CONST_STRING;
        }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 273 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
strBuffer << yytext; yylloc->columns (yyleng);
	YY_BREAK


case 107:
YY_RULE_SETUP
#line 277 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{           /* END OF CHAR */
                    UnicodeString str(strBuffer.str().c_str());
                    strBuffer.str(std::string());
                    if (str.length() != 1) {
                      yylval->sval = new UnicodeString(str);
                      BEGIN(CodeState);
                      return token::T_CONST_STRING;
                    } else {
                      yylval->cval = str[0];
                      BEGIN(CodeState);
                      return token::T_CONST_CHAR;
                    }
        }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 291 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
{
        strBuffer << *yytext;
    }
	YY_BREAK

case 109:
YY_RULE_SETUP
#line 296 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"
ECHO;
	YY_BREAK
#line 2045 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.tab.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CodeState):
case YY_STATE_EOF(ScriptState):
case YY_STATE_EOF(PrintState):
case YY_STATE_EOF(UnicodeStringState):
case YY_STATE_EOF(UnicodeCharState):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	Kiwifree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	Kiwifree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					Kiwirealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) Kiwirealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 703 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 703 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 702);

	return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) Kiwialloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) Kiwialloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		Kiwifree((void *) b->yy_ch_buf  );

	Kiwifree((void *) b  );
}

/* %if-c-only */
/* %endif */

/* %if-c++-only */

/* %endif */

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)Kiwialloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)Kiwirealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) Kiwialloc(new_size  );

		else
			(yy_start_stack) = (int *) Kiwirealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *Kiwialloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *Kiwirealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void Kiwifree (void * ptr )
{
	free( (char *) ptr );	/* see Kiwirealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 296 "/home/alurin/projects/kiwi/sources/modules/kiwi-core/Script/Lexer.ypp"



/* For KiwiFlexLexer vtable */
int KiwiFlexLexer::yylex() { return token::T_EOF; }

