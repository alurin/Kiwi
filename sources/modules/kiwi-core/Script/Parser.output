Nonterminals useless in grammar

   namespace_body
   class_declare
   $@1
   class_body
   field_declare
   method_declare
   argument_list_declare
   anonym_type
   type


Terminals unused in grammar

   "<%"
   "<%:"
   "%>"
   "text"
   "end of line"
   "put"
   "putn"
   "in"
   "ref"
   "out"
   "..."
   "=>"
   "<<"
   ">>"
   "||"
   "&&"
   "=="
   "!="
   ">="
   "<="
   "++"
   "--"
   "+="
   "-="
   "/="
   "*="
   "<<="
   ">>="
   "&="
   "|="
   "symbol"
   "variable"
   "instance field"
   "static field"
   "auto"
   "decl"
   "void"
   "bool"
   "int"
   "char"
   "string"
   "double"
   "as"
   "is"
   "new"
   "if"
   "else"
   "elseif"
   "for"
   "foreach"
   "while"
   "repeat"
   "break"
   "continue"
   "return"
   "try"
   "catch"
   "finally"
   "throw"
   "null"
   "true"
   "false"
   "integer const"
   "character const"
   "string const"
   "class"
   "interface"
   "aspect"
   "enum"
   "delegate"
   "mixin"
   "function"
   "static"
   "abstract"
   "final"
   "private"
   "protected"
   "public"
   "var"
   T_BOGUS
   MEMBER
   '='
   '|'
   '^'
   '&'
   '<'
   '>'
   '-'
   '+'
   '*'
   '/'
   '%'
   UMINUS
   '.'
   '['
   '('
   PRE
   '{'
   '}'
   ')'
   ':'


Rules useless in grammar

    7 namespace_body: class_declare namespace_body
    8               | /* пусто */

    9 $@1: /* пусто */

   10 class_declare: "class" "identifier" $@1 '{' class_body '}'

   11 class_body: field_declare
   12           | method_declare

   13 field_declare: "var" "instance field" anonym_type
   14              | "var" "static field" anonym_type

   15 method_declare: "function" "identifier" '(' argument_list_declare ')' ':' type

   16 argument_list_declare: "variable" anonym_type

   17 anonym_type: ':' type
   18            | /* пусто */

   19 type: /* пусто */


Грамматика

    0 $accept: start "end of stream"

    1 start: namespace_declare start
    2      | "end of stream"

    3 namespace_declare: "namespace" qualified_identificator ';'

    4 qualified_identificator: "identifier" qualified_identificator_part

    5 qualified_identificator_part: "::" "identifier" qualified_identificator_part
    6                             | /* пусто */


Терминальные символы с правилами, в которых они появляются

"end of stream" (0) 0 2
'%' (37)
'&' (38)
'(' (40)
')' (41)
'*' (42)
'+' (43)
'-' (45)
'.' (46)
'/' (47)
':' (58)
';' (59) 3
'<' (60)
'=' (61)
'>' (62)
'[' (91)
'^' (94)
'{' (123)
'|' (124)
'}' (125)
error (256)
"<%" (258)
"<%:" (259)
"%>" (260)
"text" (261)
"end of line" (262)
"put" (263)
"putn" (264)
"in" (265)
"ref" (266)
"out" (267)
"..." (268)
"=>" (269)
"<<" (270)
">>" (271)
"||" (272)
"&&" (273)
"==" (274)
"!=" (275)
">=" (276)
"<=" (277)
"++" (278)
"--" (279)
"+=" (280)
"-=" (281)
"/=" (282)
"*=" (283)
"<<=" (284)
">>=" (285)
"&=" (286)
"|=" (287)
"identifier" (288) 4 5
"symbol" (289)
"variable" (290)
"instance field" (291)
"static field" (292)
"auto" (293)
"decl" (294)
"void" (295)
"bool" (296)
"int" (297)
"char" (298)
"string" (299)
"double" (300)
"as" (301)
"is" (302)
"new" (303)
"if" (304)
"else" (305)
"elseif" (306)
"for" (307)
"foreach" (308)
"while" (309)
"repeat" (310)
"break" (311)
"continue" (312)
"return" (313)
"try" (314)
"catch" (315)
"finally" (316)
"throw" (317)
"null" (318)
"true" (319)
"false" (320)
"integer const" (321)
"character const" (322)
"string const" (323)
"namespace" (324) 3
"class" (325)
"interface" (326)
"aspect" (327)
"enum" (328)
"delegate" (329)
"mixin" (330)
"function" (331)
"static" (332)
"abstract" (333)
"final" (334)
"private" (335)
"protected" (336)
"public" (337)
"var" (338)
"::" (339) 5
T_BOGUS (340)
MEMBER (341)
UMINUS (342)
PRE (343)


Нетерминальные символы с правилами, в которых они появляются

$accept (108)
    налево: 0
start (109)
    налево: 1 2, направо: 0 1
namespace_declare (110)
    налево: 3, направо: 1
qualified_identificator (111)
    налево: 4, направо: 3
qualified_identificator_part (112)
    налево: 5 6, направо: 4 5


состояние 0

    0 $accept: . start "end of stream"

    "end of stream"  сдвиг, и переход в состояние 1
    "namespace"      сдвиг, и переход в состояние 2

    start              переход в состояние 3
    namespace_declare  переход в состояние 4


состояние 1

    2 start: "end of stream" .

    $default  вывод с использованием правила 2 (start)


состояние 2

    3 namespace_declare: "namespace" . qualified_identificator ';'

    "identifier"  сдвиг, и переход в состояние 5

    qualified_identificator  переход в состояние 6


состояние 3

    0 $accept: start . "end of stream"

    "end of stream"  сдвиг, и переход в состояние 7


состояние 4

    1 start: namespace_declare . start

    "end of stream"  сдвиг, и переход в состояние 1
    "namespace"      сдвиг, и переход в состояние 2

    start              переход в состояние 8
    namespace_declare  переход в состояние 4


состояние 5

    4 qualified_identificator: "identifier" . qualified_identificator_part

    "::"  сдвиг, и переход в состояние 9

    $default  вывод с использованием правила 6 (qualified_identificator_part)

    qualified_identificator_part  переход в состояние 10


состояние 6

    3 namespace_declare: "namespace" qualified_identificator . ';'

    ';'  сдвиг, и переход в состояние 11


состояние 7

    0 $accept: start "end of stream" .

    $default  accept


состояние 8

    1 start: namespace_declare start .

    $default  вывод с использованием правила 1 (start)


состояние 9

    5 qualified_identificator_part: "::" . "identifier" qualified_identificator_part

    "identifier"  сдвиг, и переход в состояние 12


состояние 10

    4 qualified_identificator: "identifier" qualified_identificator_part .

    $default  вывод с использованием правила 4 (qualified_identificator)


состояние 11

    3 namespace_declare: "namespace" qualified_identificator ';' .

    $default  вывод с использованием правила 3 (namespace_declare)


состояние 12

    5 qualified_identificator_part: "::" "identifier" . qualified_identificator_part

    "::"  сдвиг, и переход в состояние 9

    $default  вывод с использованием правила 6 (qualified_identificator_part)

    qualified_identificator_part  переход в состояние 13


состояние 13

    5 qualified_identificator_part: "::" "identifier" qualified_identificator_part .

    $default  вывод с использованием правила 5 (qualified_identificator_part)
