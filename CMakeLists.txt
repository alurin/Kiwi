# <Copyright Holder>. Copyright (C) <Copyright Year(s)>. <License>.

#
# Project Properties
#
CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT (kiwi)
SET (KIWI_NAME "Kiwi")
SET (KIWI_CODENAME "${PROJECT_NAME}")
SET (KIWI_COPYRIGHT_YEARS "2012")
SET (KIWI_VERSION_MAJOR 0)
SET (KIWI_VERSION_MINOR 1)
SET (KIWI_VERSION_PATCH 0)
SET (KIWI_VERSION_TYPE SNAPSHOT)
SET (KIWI_VERSION_STRING "${KIWI_VERSION_MAJOR}.${KIWI_VERSION_MINOR}.${KIWI_VERSION_PATCH}-${KIWI_VERSION_TYPE}")
SET (KIWI_VENDOR_ID "com.kronverk-studio")
SET (KIWI_VENDOR_NAME "Vasiliy Sheredeko")
SET (KIWI_VENDOR_URL "kronverk-studio.ru")
SET (KIWI_ID "${KIWI_VENDOR_ID}.${PROJECT_NAME}")


#
# Debugging Options
#
SET (CMAKE_VERBOSE_MAKEFILE 0) # Use 1 for debugging, 0 for release

OPTION( DEBUG "Enable debug build for source" ON )
IF( ${DEBUG} )
    SET( KIWI_DEBUG 1 )
    SET( KIWI_RELEASE 0 )
    SET( CMAKE_BUILD_TYPE "Debug" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
ELSE( ${DEBUG} )
    SET( KIWI_DEBUG  0 )
    SET( KIWI_RELEASE 1 )
    SET( CMAKE_BUILD_TYPE "Release" CACHE STRING "Choose the type of build, options are: None (CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release RelWithDebInfo MinSizeRel." FORCE)
ENDIF( ${DEBUG} )

IF (CMAKE_COMPILER_IS_GNUCC AND KIWI_DEBUG)
    SET(CMAKE_C_FLAGS           ${CMAKE_C_FLAGS}          "-g3 -gdwarf-2 -g -O0")
    SET(CMAKE_CXX_FLAGS         ${CMAKE_CXX_FLAGS}        "-g3 -gdwarf-2 -g -O0")
ENDIF (CMAKE_COMPILER_IS_GNUCC AND KIWI_DEBUG)

#
# Project Output Paths
#
SET (MAINFOLDER ${PROJECT_SOURCE_DIR})
SET (EXECUTABLE_OUTPUT_PATH "${MAINFOLDER}/bin")
SET (LIBRARY_OUTPUT_PATH "${MAINFOLDER}/lib")

#
# Project Search Paths
#
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/tool")
LIST (APPEND CMAKE_PREFIX_PATH "${MAINFOLDER}/thirdparty")
SET (CMAKE_MODULE_PATH "${MAINFOLDER}/tool/share/cmake")
INCLUDE_DIRECTORIES("${MAINFOLDER}/include")

#
# Locate Project Prerequisites
#
SET (Boost_ADDITIONAL_VERSIONS "1.46" "1.46.0" "1.47" "1.47.0" "1.48" "1.48.0" "1.49" "1.49.0" "1.50" "1.50.0")
FIND_PACKAGE (Boost 1.37 COMPONENTS "date_time" "filesystem" "graph" "iostreams" "program_options" "regex" "serialization" "signals" "system" "thread" "wserialization" REQUIRED)
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

FIND_PACKAGE (Log4Cxx REQUIRED)
INCLUDE_DIRECTORIES(${Log4Cxx_INCLUDE_DIRS})
LINK_DIRECTORIES(${Log4Cxx_LIBRARY_DIRS})

FIND_PACKAGE (UnitTestPlusPlus REQUIRED)
INCLUDE_DIRECTORIES(${UnitTestPlusPlus_INCLUDE_DIRS})
LINK_DIRECTORIES(${UnitTestPlusPlus_LIBRARY_DIRS})

FIND_PACKAGE (ICU REQUIRED)
INCLUDE_DIRECTORIES(${ICU_INCLUDE_DIRS})
LINK_DIRECTORIES(${ICU_LIBRARIES} ${ICU_I18N_LIBRARIES})

FIND_PACKAGE (LLVM COMPONENTS "engine" "native" "jit" REQUIRED 3.0)
INCLUDE_DIRECTORIES(${LLVM_INCLUDE_DIRS})
LINK_DIRECTORIES(${LLVM_LIBRARY_DIRS})

#
# Configure Files
#
FILE (GLOB_RECURSE CONFIGINPUTS1 include/*.in.hpp.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS2 include/*.hpp.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS3 source/*.in.hpp.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS4 source/*.hpp.in.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS5 test/*.in.hpp.cmake)
FILE (GLOB_RECURSE CONFIGINPUTS6 test/*.hpp.in.cmake)
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS1}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS2}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS3}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS4}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS5}")
LIST (APPEND CONFIGINPUTS "${CONFIGINPUTS6}")
FOREACH (CONFIGINPUT ${CONFIGINPUTS})
    STRING (REPLACE ".in.hpp.cmake" ".hpp" CONFIGOUTPUT1 "${CONFIGINPUT}")
    STRING (REPLACE ".hpp.in.cmake" ".hpp" CONFIGOUTPUT2 "${CONFIGOUTPUT1}")
    CONFIGURE_FILE ("${CONFIGINPUT}" "${CONFIGOUTPUT2}")
ENDFOREACH (CONFIGINPUT ${CONFIGINPUTS})

#
# Add Build Targets
#
ADD_SUBDIRECTORY(source/kiwi-core)
ADD_SUBDIRECTORY(source/kiwi-compiler)
ADD_SUBDIRECTORY(test)

#
# Add Install Targets
#
IF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")
    INSTALL(DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}" DESTINATION "include")
ENDIF (EXISTS "${MAINFOLDER}/include/${PROJECT_NAME}" AND IS_DIRECTORY "${MAINFOLDER}/include/${PROJECT_NAME}")

#
# Add Documentation Targets
#
CONFIGURE_FILE ("Doxyfile.in" "Doxyfile")
INCLUDE (DocumentationTargets)
